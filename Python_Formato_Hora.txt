import pandas as pd
import re
import os

def convertir_hora_militar(hora_str):
    """
    Convierte una hora en formato 12h (con a.m./p.m.) a formato militar (24h)
    """
    if pd.isna(hora_str) or hora_str == '' or str(hora_str).strip() == '':
        return hora_str
    
    # Convertir a string si es necesario
    hora_str = str(hora_str).strip()
    
    # Patr√≥n para extraer horas, minutos y periodo
    patron = r'(\d{1,2}):(\d{2})\s*(a\.?\s*m\.?|p\.?\s*m\.?)'
    match = re.search(patron, hora_str, re.IGNORECASE)
    
    if not match:
        # Si no coincide el patr√≥n, retornar original
        return hora_str
    
    hora = int(match.group(1))
    minutos = match.group(2)
    periodo = match.group(3).lower().replace('.', '').replace(' ', '')
    
    # Validar que la hora est√© en rango v√°lido (1-12)
    if hora < 1 or hora > 12:
        return hora_str
    
    # L√≥gica de conversi√≥n
    if 'am' in periodo:
        if hora == 12:
            hora_militar = 0  # Medianoche: 12 am -> 0
        else:
            hora_militar = hora  # 1-11 am se mantienen igual
    elif 'pm' in periodo:
        if hora == 12:
            hora_militar = 12  # Mediod√≠a: 12 pm -> 12
        else:
            hora_militar = hora + 12  # 1-11 pm -> 13-23
    else:
        return hora_str
    
    # Validar que la hora militar est√© en rango v√°lido (0-23)
    if hora_militar < 0 or hora_militar > 23:
        return hora_str
    
    # Formatear a string con 2 d√≠gitos
    return f"{hora_militar:02d}:{minutos}"

def verificar_horas_validas(df, columna_hora):
    """
    Verifica que todas las horas en la columna especificada sean v√°lidas
    """
    print("\nüîç VERIFICANDO HORAS V√ÅLIDAS...")
    
    def es_hora_valida(hora_str):
        if pd.isna(hora_str) or hora_str == '':
            return False
        try:
            if ':' in str(hora_str):
                h, m = map(int, str(hora_str).split(':'))
                return 0 <= h <= 23 and 0 <= m <= 59
            return False
        except:
            return False
    
    horas_validas = df[columna_hora].apply(es_hora_valida)
    total_validas = horas_validas.sum()
    total_invalidas = len(df) - total_validas
    
    print(f"‚úÖ Horas v√°lidas: {total_validas}/{len(df)}")
    print(f"‚ùå Horas inv√°lidas: {total_invalidas}/{len(df)}")
    
    if total_invalidas > 0:
        print("\nüìã Primeras 10 horas inv√°lidas encontradas:")
        invalid_hours = df[~horas_validas][columna_hora].head(10)
        for i, hora in enumerate(invalid_hours, 1):
            print(f"   {i}. {hora}")
    
    return horas_validas

def procesar_archivo_accidentalidad(archivo_entrada, archivo_salida=None):
    """
    Procesa el archivo de accidentalidad y convierte las horas a formato militar
    """
    # Leer el archivo Excel
    print("Leyendo archivo Excel...")
    df = pd.read_excel(archivo_entrada)
    
    # Verificar que existe la columna HORA
    if 'HORA' not in df.columns:
        print("Error: No se encontr√≥ la columna 'HORA' en el archivo")
        print(f"Columnas disponibles: {list(df.columns)}")
        return None
    
    print(f"üìä Archivo cargado: {len(df)} registros")
    print(f"üìù Columnas: {list(df.columns)}")
    
    # Mostrar distribuci√≥n inicial de periodos
    print("\nüìà DISTRIBUCI√ìN INICIAL DE HORAS:")
    muestras = df['HORA'].head(10).tolist()
    for i, hora in enumerate(muestras, 1):
        print(f"   {i}. {hora}")
    
    # Contar periodos antes de la conversi√≥n
    periodos_antes = df['HORA'].str.extract(r'(a\.?\s*m\.?|p\.?\s*m\.?)', flags=re.IGNORECASE)[0]
    if periodos_antes is not None:
        conteo_periodos = periodos_antes.value_counts()
        print(f"\nüïí Distribuci√≥n de periodos (antes):")
        for periodo, count in conteo_periodos.items():
            if pd.notna(periodo):
                print(f"   {periodo}: {count} registros")
    
    # Aplicar la conversi√≥n
    print("\nüîÑ CONVIRTIENDO HORAS A FORMATO MILITAR...")
    
    # Guardar valores originales
    df['HORA_ORIGINAL'] = df['HORA']
    
    # Aplicar conversi√≥n
    df['HORA'] = df['HORA'].apply(convertir_hora_militar)
    
    # Mostrar ejemplos de conversi√≥n
    print("\nüìã EJEMPLOS DE CONVERSI√ìN:")
    for i in range(min(8, len(df))):
        original = df['HORA_ORIGINAL'].iloc[i]
        convertida = df['HORA'].iloc[i]
        print(f"   {i+1}. '{original}' ‚Üí '{convertida}'")
    
    # Verificar que las horas convertidas sean v√°lidas
    horas_validas = verificar_horas_validas(df, 'HORA')
    
    # Si hay horas inv√°lidas, mostrar m√°s detalles
    if not horas_validas.all():
        invalid_count = len(df) - horas_validas.sum()
        print(f"\n‚ö†Ô∏è  Se encontraron {invalid_count} horas inv√°lidas despu√©s de la conversi√≥n")
        print("   Se mantendr√°n los valores originales para estas horas")
        
        # Revertir las conversiones inv√°lidas
        mascara_invalidas = ~horas_validas
        df.loc[mascara_invalidas, 'HORA'] = df.loc[mascara_invalidas, 'HORA_ORIGINAL']
        
        print("‚úÖ Horas inv√°lidas revertidas a sus valores originales")
        
        # Verificar nuevamente despu√©s de la correcci√≥n
        verificar_horas_validas(df, 'HORA')
    
    # Guardar el archivo procesado
    if archivo_salida:
        print(f"\nüíæ GUARDANDO ARCHIVO...")
        df.to_excel(archivo_salida, index=False)
        print(f"‚úÖ Archivo guardado exitosamente como: {archivo_salida}")
    
    # Estad√≠sticas finales
    print(f"\nüìä ESTAD√çSTICAS FINALES")
    print(f"   ‚Ä¢ Total de registros: {len(df):,}")
    print(f"   ‚Ä¢ Columna 'HORA' convertida a formato militar (24h)")
    print(f"   ‚Ä¢ Columna 'HORA_ORIGINAL' conserva los valores originales")
    
    return df

def validar_conversiones():
    """
    Valida que las conversiones sean correctas con casos de prueba
    """
    print("üß™ VALIDACI√ìN DE CONVERSIONES")
    
    casos_prueba = [
        # Casos a.m.
        ("12:00 a. m.", "00:00"),
        ("12:30 a. m.", "00:30"), 
        ("1:15 a. m.", "01:15"),
        ("6:45 a. m.", "06:45"),
        ("11:45 a. m.", "11:45"),
        
        # Casos p.m.
        ("12:00 p. m.", "12:00"),
        ("12:45 p. m.", "12:45"),
        ("1:30 p. m.", "13:30"),
        ("6:00 p. m.", "18:00"),
        ("11:55 p. m.", "23:55"),
        
        # Casos edge
        ("12:00 a.m.", "00:00"),
        ("12:00 p.m.", "12:00"),
        ("1:00 pm", "13:00"),
        ("1:00 am", "01:00"),
        
        # Casos inv√°lidos (deben mantenerse igual)
        ("25:00 a. m.", "25:00 a. m."),
        ("13:00 a. m.", "13:00 a. m."),
    ]
    
    print("Probando casos de prueba:")
    errores = 0
    for original, esperado in casos_prueba:
        resultado = convertir_hora_militar(original)
        estado = "‚úÖ" if resultado == esperado else "‚ùå"
        if estado == "‚ùå":
            errores += 1
        print(f"   {estado} '{original}' -> '{resultado}' (esperado: '{esperado}')")
    
    if errores == 0:
        print("üéâ Todas las validaciones pasaron correctamente")
    else:
        print(f"‚ö†Ô∏è  Se encontraron {errores} errores en las validaciones")
    
    return errores == 0

# Configuraci√≥n de rutas espec√≠ficas
def main():
    # Nueva ruta espec√≠fica
    archivo_entrada = r"C:\Users\JONATHAN HINCAPIE\Desktop\Proyecto\Proyecto_Accidentalidad.xlsx"
    
    # Crear nombre para archivo de salida
    directorio = os.path.dirname(archivo_entrada)
    nombre_archivo = os.path.basename(archivo_entrada)
    nombre_sin_extension = os.path.splitext(nombre_archivo)[0]
    archivo_salida = os.path.join(directorio, f"{nombre_sin_extension}_HORA_MILITAR.xlsx")
    
    print("=" * 70)
    print("CONVERSOR DE HORAS A FORMATO MILITAR")
    print("=" * 70)
    print(f"üìÅ Archivo de entrada: {archivo_entrada}")
    print(f"üíæ Archivo de salida: {archivo_salida}")
    print("=" * 70)
    
    try:
        # Validar que el archivo existe
        if not os.path.exists(archivo_entrada):
            print(f"\n‚ùå Error: No se encontr√≥ el archivo en la ruta:")
            print(f"   {archivo_entrada}")
            print("\nüìã Por favor verifica:")
            print("   1. Que la ruta sea correcta")
            print("   2. Que el archivo exista")
            print("   3. Que el nombre del archivo sea exactamente 'Proyecto_Accidentalidad.xlsx'")
            return
        
        # Validar funci√≥n de conversi√≥n
        print("\n" + "="*50)
        validacion_exitosa = validar_conversiones()
        
        if not validacion_exitosa:
            print("\n‚ö†Ô∏è  Se encontraron problemas en la validaci√≥n.")
            respuesta = input("   ¬øDeseas continuar de todos modos? (s/n): ")
            if respuesta.lower() != 's':
                print("‚ùå Proceso cancelado por el usuario")
                return
        
        # Procesar archivo
        print("\n" + "="*50)
        print("üöÄ INICIANDO PROCESAMIENTO DEL ARCHIVO...")
        df_procesado = procesar_archivo_accidentalidad(archivo_entrada, archivo_salida)
        
        if df_procesado is not None:
            print("\n" + "="*50)
            print("üéâ ¬°PROCESAMIENTO COMPLETADO EXITOSAMENTE!")
            print("="*50)
            print(f"üìä Resumen:")
            print(f"   ‚Ä¢ Archivo procesado: {archivo_salida}")
            print(f"   ‚Ä¢ Registros totales: {len(df_procesado):,}")
            print(f"   ‚Ä¢ Columna 'HORA' ahora en formato militar (24h)")
            print(f"   ‚Ä¢ Columna 'HORA_ORIGINAL' guarda los valores originales")
            print("\nüìã El archivo contiene las siguientes columnas:")
            for i, columna in enumerate(df_procesado.columns, 1):
                print(f"   {i}. {columna}")
                
    except PermissionError:
        print(f"\n‚ùå Error: No se puede acceder al archivo.")
        print("   üí° Posiblemente est√° abierto en Excel. Ci√©rralo e intenta nuevamente.")
    except Exception as e:
        print(f"\n‚ùå Error durante el procesamiento: {str(e)}")
        print("   üîß Esto puede deberse a:")
        print("      - Formato de archivo incorrecto")
        print("      - Estructura de datos inesperada")
        print("      - Problemas de permisos")

if __name__ == "__main__":
    main()
